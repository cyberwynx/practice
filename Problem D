#include <iostream>
#include <random>
#include <iomanip>
#include <vector>
#include <algorithm>
#include <cstdint>
#include <cassert>
#include <functional>
#include <complex>
#include <tuple>
#include <istream>
#include <iterator>
using namespace std;
typedef long long ll;
//typedef __int128_t LL;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
#define F first
#define S second
#define pb push_back
mt19937 rnd;


const long double PI = std::acos(-1.0L);


int mod;

class Modular {
public:
    int val;
    Modular(int new_val = 0) {
        val = new_val;
        if (val < 0) val += mod;
        if (val >= mod) val -= mod;
    }
    friend Modular operator+(const Modular& a, const Modular& b) {
        if (a.val + b.val >= mod) return a.val + b.val - mod;
        else return a.val + b.val;
    }
    friend Modular operator-(const Modular& a, const Modular& b) {
        if (a.val - b.val < 0) return a.val - b.val + mod;
        else return a.val - b.val;
    }
    friend Modular operator*(const Modular& a, const Modular& b) {
        return 1ll * a.val * b.val % mod;
    }
    friend Modular binpow(Modular a, ll n) {
        Modular res = 1;
        for (; n; n >>= 1) {
            if (n & 1) res *= a;
            a *= a;
        }
        return res;
    }
    /* ALTERNATIVE INVERSE FUNCTION USING EXTENDED EUCLIDEAN ALGORITHM
    friend void gcd(int a, int b, Modular& x, Modular& y) {
        if (a == 0) {
            x = Modular(0);
            y = Modular(1);
            return;
        }
        Modular x1, y1;
        gcd(b % a, a, x1, y1);
        x = y1 - (b / a) * x1;
        y = x1;
    }
    friend Modular inv(const Modular& a) {
        Modular x, y;
        gcd(a.val, mod, x, y);
        return x;
    }
    */
    friend Modular inv(const Modular& a) {
        return binpow(a, mod - 2);
    }
    Modular operator/(const Modular& ot) const {
        return *this * inv(ot);
    }
    Modular& operator++() {
        if (val + 1 == mod) val = 0;
        else ++val;
        return *this;
    }
    Modular operator++(int) {
        Modular tmp = *this;
        ++(*this);
        return tmp;
    }
    Modular operator+() const {
        return *this;
    }
    Modular operator-() const {
        return 0 - *this;
    }
    Modular& operator+=(const Modular& ot) {
        return *this = *this + ot;
    }
    Modular& operator-=(const Modular& ot) {
        return *this = *this - ot;
    }
    Modular& operator*=(const Modular& ot) {
        return *this = *this * ot;
    }
    Modular& operator/=(const Modular& ot) {
        return *this = *this / ot;
    }
    bool operator==(const Modular& ot) const {
        return val == ot.val;
    }
    bool operator!=(const Modular& ot) const {
        return val != ot.val;
    }
    bool operator<(const Modular& ot) const {
        return val < ot.val;
    }
    bool operator>(const Modular& ot) const {
        return val > ot.val;
    }
};

istream& operator>>(istream& istr, Modular& x) {
    return istr >> x.val;
}

ostream& operator<<(ostream& ostr, const Modular& x) {
    return ostr << x.val;
}

template <typename T>
class ConstPolyIter;

template <typename T>
class Polynomial {
private:
    const T zero = T(0);
    std::vector<T> poly;
    Polynomial& fix_size() {
        while (!poly.empty() && poly.back() == T(0)) {
            poly.pop_back();
        }
        return *this;
    }

public:
    explicit Polynomial(const std::vector<T>& _poly) {
        poly = _poly;
        fix_size();
    }
    explicit Polynomial(const T& c = T(0)) {
        poly = {c};
        fix_size();
    }
    template <typename Iter>
    Polynomial(Iter first, Iter last) {
        while (first != last) {
            poly.push_back(*first++);
        }
        fix_size();
    }
    Polynomial(const Polynomial& ot) {
        poly.resize(ot.Degree() + 1);
        for (int i = 0; i <= ot.Degree(); ++i) {
            poly[i] = ot[i];
        }
        fix_size();
    }
    Polynomial(Polynomial&& ot) {
        poly.resize(ot.Degree() + 1);
        for (int i = 0; i <= ot.Degree(); ++i) {
            poly[i] = ot[i];
        }
        fix_size();
    }
    Polynomial& operator=(const Polynomial& ot) {
        poly.resize(ot.Degree() + 1);
        for (int i = 0; i <= ot.Degree(); ++i) {
            poly[i] = ot[i];
        }
        fix_size();
        return *this;
    }
    bool operator==(const Polynomial& ot) const {
        if (Degree() != ot.Degree()) {
            return false;
        } else {
            for (int i = 0; i <= Degree(); ++i) {
                if ((*this)[i] != ot[i]) {
                    return false;
                }
            }
            return true;
        }
    }
    bool operator!=(const Polynomial& ot) const {
        return !(*this == ot);
    }
    friend bool operator==(const Polynomial<T>& a, const T& b) {
        return a == Polynomial<T>(b);
    }
    friend bool operator==(const T& a, const Polynomial<T>& b) {
        return Polynomial<T>(a) == b;
    }
    friend bool operator!=(const Polynomial<T>& a, const T& b) {
        return a != Polynomial<T>(b);
    }
    friend bool operator!=(const T& a, const Polynomial<T>& b) {
        return Polynomial<T>(a) != b;
    }
    Polynomial operator+(const Polynomial& ot) const {
        Polynomial res = *this;
        if (res.Degree() < ot.Degree()) {
            res.poly.resize(ot.Degree() + 1);
        }
        for (int i = 0; i <= ot.Degree(); ++i) {
            res.poly[i] += ot[i];
        }
        return res.fix_size();
    }
    Polynomial operator-(const Polynomial& ot) const {
        Polynomial res = *this;
        if (res.Degree() < ot.Degree()) {
            res.poly.resize(ot.Degree() + 1);
        }
        for (int i = 0; i <= ot.Degree(); ++i) {
            res.poly[i] -= ot[i];
        }
        return res.fix_size();
    }
    Polynomial operator*(const Polynomial& ot) const {
        if (Degree() == -1 || ot.Degree() == -1) {
            return Polynomial(T(0));
        } else {
            Polynomial res;
            res.poly.resize(Degree() + ot.Degree() + 1);
            for (int i = 0; i <= Degree(); ++i) {
                for (int j = 0; j <= ot.Degree(); ++j) {
                    res.poly[i + j] += poly[i] * ot.poly[j];
                }
            }
            return res;
        }
    }
    friend Polynomial<T> operator+(const Polynomial<T>& a, const T& b) {
        return a + Polynomial<T>(b);
    }
    friend Polynomial<T> operator+(const T& a, const Polynomial<T>& b) {
        return Polynomial<T>(a) + b;
    }
    friend Polynomial<T> operator-(const Polynomial<T>& a, const T& b) {
        return a - Polynomial<T>(b);
    }
    friend Polynomial<T> operator-(const T& a, const Polynomial<T>& b) {
        return Polynomial<T>(a) - b;
    }
    friend Polynomial<T> operator*(const Polynomial<T>& a, const T& b) {
        return a * Polynomial<T>(b);
    }
    friend Polynomial<T> operator*(const T& a, const Polynomial<T>& b) {
        return Polynomial<T>(a) * b;
    }
    Polynomial& operator+=(const Polynomial& ot) {
        return *this = *this + ot;
    }
    Polynomial& operator+=(const T& ot) {
        return *this += Polynomial(ot);
    }
    Polynomial& operator-=(const Polynomial& ot) {
        return *this = *this - ot;
    }
    Polynomial& operator-=(const T& ot) {
        return *this -= Polynomial(ot);
    }
    Polynomial& operator*=(const Polynomial& ot) {
        return *this = *this * ot;
    }
    Polynomial& operator*=(const T& ot) {
        return *this *= Polynomial(ot);
    }
    const T& operator[](int i) const {
        if (i > Degree()) {
            return zero;
        } else {
            return poly[i];
        }
    }
    bool Empty() const {
        return poly.empty();
    }
    int Degree() const {
        if (Empty()) {
            return -1;
        } else {
            return poly.size() - 1;
        }
    }
    T operator()(const T& val) const {
        T res = T(0);
        T pw = 1;
        for (int i = 0; i <= Degree(); ++i) {
            res += poly[i] * pw;
            pw *= val;
        }
        return res;
    }
    ConstPolyIter<T> begin() const {
        return ConstPolyIter<T>(*this, 0);
    }
    ConstPolyIter<T> end() const {
        return ConstPolyIter<T>(*this, Degree() + 1);
    }
    Polynomial operator&(const Polynomial& ot) const {
        if (Degree() == -1) {
            return *this;
        } else if (ot.Degree() == -1) {
            return Polynomial(poly[0]);
        } else {
            Polynomial res(0);
            Polynomial pw(1);
            for (int i = 0; i <= Degree(); ++i) {
                res += poly[i] * pw;
                pw *= ot;
            }
            return res;
        }
    }
    const T& back() const {
        return poly.back();
    }
    Polynomial shift(int d) const {
        if (Degree() == -1 || d == 0) {
            return *this;
        } else {
            Polynomial res(*this);
            res.poly.resize(res.poly.size() + d);
            for (int i = res.Degree(); i >= d; --i) {
                res.poly[i] = res[i - d];
            }
            for (int i = d - 1; i >= 0; --i) {
                res.poly[i] = T(0);
            }
            return res;
        }
    }
};

template<typename T>
Polynomial<T> x_to_nth_power(int n) {
    if (n < 0) {
        return Polynomial<T>();
    } else {
        std::vector<T> coefficients(n + 1, T(0));
        coefficients[n] = T(1);
        return Polynomial(coefficients);
    }
}

template<typename T>
std::pair<Polynomial<T>, Polynomial<T>>
divide(const Polynomial<T>& lhs, const Polynomial<T>& rhs) {
    Polynomial<T> result, remainder(lhs);
    for (int power = lhs.Degree(); power >= rhs.Degree(); --power) {
        const auto to_subtract = (remainder[power] / rhs[rhs.Degree()])
                                 * x_to_nth_power<T>(power - rhs.Degree());
        remainder -= to_subtract * rhs;
        result += to_subtract;
    }
    return {result, remainder};
}

template<typename T>
Polynomial<T> operator/(const Polynomial<T>& lhs, const Polynomial<T>& rhs) {
    const auto [d, _] = divide(lhs, rhs);
    return d;
}

template<typename T>
Polynomial<T> operator/=(Polynomial<T>& lhs, const Polynomial<T>& rhs) {
    lhs = lhs / rhs;
    return lhs;
}

template<typename T>
Polynomial<T> operator/=(Polynomial<T>& lhs, const T& rhs) {
    lhs = lhs / Polynomial(rhs);
    return lhs;
}

template<typename T>
Polynomial<T> operator%(const Polynomial<T>& lhs, const Polynomial<T>& rhs) {
    const auto [_, r] = divide(lhs, rhs);
    return r;
}

template<typename T>
Polynomial<T> operator%=(Polynomial<T>& lhs, const Polynomial<T>& rhs) {
    lhs = lhs % rhs;
    return lhs;
}

template<typename T>
Polynomial<T> operator,(const Polynomial<T>& lhs, const Polynomial<T>& rhs) {
    auto a(lhs), b(rhs);
    while (b.Degree() >= 0) {
        a %= b;
        std::swap(a, b);
    }
    if (a.Degree() >= 0) {
        auto leading_coefficient = a[a.Degree()];
        a /= leading_coefficient;
    }
    return a;
}

template <typename T>
std::ostream& operator<<(std::ostream& ostr, const Polynomial<T>& p) {
    if (p.Degree() == -1) {
        ostr << "0";
    } else {
        for (int i = p.Degree(); i >= 0; --i) {
            if (p[i] < T(0)) {
                ostr << "-";
                if (p[i] == T(-1)) {
                    if (i > 0) {
                        ostr << "x";
                        if (i > 1) {
                            ostr << "^" << i;
                        }
                    } else {
                        ostr << "1";
                    }
                } else {
                    if (i > 0) {
                        ostr << -p[i] << "*x";
                        if (i > 1) {
                            ostr << "^" << i;
                        }
                    } else {
                        ostr << -p[i];
                    }
                }
            } else if (p[i] > T(0)) {
                if (i < p.Degree()) {
                    ostr << "+";
                }
                if (p[i] == T(1)) {
                    if (i > 0) {
                        ostr << "x";
                        if (i > 1) {
                            ostr << "^" << i;
                        }

                    } else {
                        ostr << "1";
                    }
                } else {
                    if (i > 0) {
                        ostr << p[i] << "*x";
                        if (i > 1) {
                            ostr << "^" << i;
                        }
                    } else {
                        ostr << p[i];
                    }
                }
            }
        }
    }
    return ostr;
}

template <typename T>
class ConstPolyIter {
private:
    const Polynomial<T>& p;
    int ptr;

public:
    explicit ConstPolyIter(const Polynomial<T>& _p, int _ptr) : p(_p), ptr(_ptr) {}
    ConstPolyIter& operator++() {
        ++ptr;
        return *this;
    }
    ConstPolyIter& operator--() {
        --ptr;
        return *this;
    }
    ConstPolyIter& operator+(int x) {
        ptr += x;
        return *this;
    }
    ConstPolyIter& operator-(int x) {
        ptr -= x;
        return *this;
    }
    const T& operator*() const {
        return p[ptr];
    }
    bool operator==(const ConstPolyIter& ot) const {
        return ptr == ot.ptr;
    }
    bool operator!=(const ConstPolyIter& ot) const {
        return ptr != ot.ptr;
    }
};

struct UInt {
    static const int64_t BASE = (int64_t)1e9; // Основание системы счисления
    static const int64_t WIDTH = 9;       // Количество десятичных цифр, которые хранятся в одной цифре

    // Вектор под цифры числа:
    std::vector<int64_t> digits;

    // Конструкторы
    UInt(int64_t number = 0);
    UInt(const std::string& s);
    UInt(const std::vector<int64_t>& digits);

    // Методы нормализации и сравнения:
    UInt& normalize(); // удаление лидирующих нулей и проверка на принадлежность цифр диапазону [0, BASE)
    int64_t compare(const UInt& other) const; // Сравнение (меньше = -1, равно = 0, больше = 1)

    // Методы умножения:
    UInt slow_mult(const UInt& other) const; // Медленное произведение (работает довольно быстро на числах небольшой длины)
    UInt fast_mult(const UInt& other) const; // Быстрое произведение (на основе Быстрого Преобразования Фурье комплексные числа)
    UInt mult(const UInt& other) const; // Комбинированный метод умножения на основе экспериментальных данных

    // Метод деления:
    std::pair<UInt, UInt> div_mod(const UInt& other) const; // Целая часть и остаток от деления

    // Операторы:
    UInt& operator+=(const int64_t num);     // Прибавление короткого
    UInt& operator+=(const UInt& other); // Прибавление длинного
    UInt& operator-=(const int64_t num);     // Вычитание короткого
    UInt& operator-=(const UInt& other); // Вычитание длинного
    UInt& operator*=(const int64_t num);     // Умножение на короткое
    UInt& operator*=(const UInt& other); // Умножение на длинное
    UInt& operator/=(const int64_t num);     // Деление на короткое
    UInt& operator/=(const UInt& other); // Деление на длинное
    UInt& operator%=(const UInt& other); // Остаток от деления на длинное
};

std::istream& operator>>(std::istream&, UInt&); // Ввод из потока
std::ostream& operator<<(std::ostream&, const UInt&); // Вывод в поток

UInt pow(UInt, int64_t); // Возведение в степень
UInt gcd(UInt, UInt); // Наибольший общий делитель

UInt operator+(const UInt&, const UInt&);
UInt operator-(const UInt&, const UInt&);
UInt operator*(const UInt&, const UInt&);
UInt operator/(const UInt&, const UInt&);
UInt operator%(const UInt&, const UInt&);

UInt operator+(const UInt&, const int64_t);
UInt operator+(const int64_t, const UInt&);
UInt operator-(const UInt&, const int64_t);
UInt operator*(const UInt&, const int64_t);
UInt operator*(const int64_t, const UInt&);
UInt operator/(const UInt&, const int64_t);
UInt operator^(const UInt&, const int64_t); // возведение в степень

bool operator<(const UInt&, const UInt&);
bool operator>(const UInt&, const UInt&);
bool operator<=(const UInt&, const UInt&);
bool operator>=(const UInt&, const UInt&);
bool operator==(const UInt&, const UInt&);
bool operator!=(const UInt&, const UInt&);

UInt& UInt::normalize() {
    while (digits.back() == 0 && (int64_t)digits.size() > 1) digits.pop_back();
    for (auto d : digits) assert(0 <= d && d < BASE);
    return *this;
}

// Конструктор от короткого целого
UInt::UInt(int64_t number) {
    assert(number >= 0);
    do {
        digits.push_back(number % BASE);
        number /= BASE;
    } while (number > 0);
    normalize();
}

// Конструктор от вектора из цифр:
UInt::UInt(const std::vector<int64_t>& digits) : digits(digits) {
    normalize();
}

// Конструктор от строчки:
UInt::UInt(const std::string& s) {
    const int64_t size = (int64_t)s.size();
    for (int64_t idGroup = 1, nGroups = size / WIDTH; idGroup <= nGroups; ++idGroup) {
        digits.push_back(std::stoi(s.substr(size-idGroup * WIDTH, WIDTH)));
    }
    if (size % WIDTH != 0) {
        digits.push_back(std::stoi(s.substr(0, size % WIDTH)));
    }
    normalize();
}

// Прибавление короткого:
UInt& UInt::operator+=(const int64_t num) {
    assert(num >= 0);
    if (num >= BASE) {
        return *this += UInt(num);
    }
    int64_t rem = num;
    for (int64_t i = 0; rem > 0; ++i) {
        if (i >= (int64_t)digits.size()) digits.push_back(0);
        rem += digits[i];
        if (rem >= BASE) {
            digits[i] = rem - BASE;
            rem = 1;
        } else {
            digits[i] = rem;
            rem = 0;
        }
    }
    return this->normalize();
}

// Прибавление длинного:
UInt& UInt::operator+=(const UInt& other) {
    if (other.digits.size() == 1u) {
        return *this += other.digits[0];
    }
    const int64_t s1 = this->digits.size();
    const int64_t s2 = other.digits.size();
    int64_t rem = 0;
    for (int64_t i = 0; i < s1 || i < s2 || rem > 0; ++i) {
        int64_t d1 = i < s1 ? this->digits[i] : (digits.push_back(0), 0);
        int64_t d2 = i < s2 ? other.digits[i] : 0;
        rem += d1 + d2;
        auto div = rem / BASE;
        digits[i] = rem - div * BASE;
        rem = div;
    }
    return this->normalize();
}

// Вычитание короткого:
UInt& UInt::operator-=(const int64_t num) {
    assert(num >= 0);
    if (num >= BASE) {
        return *this -= UInt(num);
    }
    int64_t rem = -num;
    for (int64_t i = 0; i < (int64_t)digits.size() && rem < 0; ++i) {
        rem += digits[i];
        if (rem < 0) { // Занимаем разряд
            digits[i] = rem + BASE;
            rem = -1;
        } else {
            digits[i] = rem;
            rem = 0;
        }
    }
    assert(rem == 0);
    return this->normalize();
}

// Вычитание длинного:
UInt& UInt::operator-=(const UInt& other) {
    if (other.digits.size() == 1u) {
        return *this -= other.digits[0];
    }
    const int64_t s1 = this->digits.size();
    const int64_t s2 = other.digits.size();
    assert(s1 >= s2);
    int64_t rem = 0;
    for (int64_t i = 0; i < s1; ++i) {
        int64_t d2 = i < s2 ? other.digits[i] : 0;
        rem += this->digits[i] - d2;
        if (rem < 0) {
            digits[i] = rem + BASE;
            rem = -1;
        } else {
            digits[i] = rem;
            rem = 0;
            if (i >= s2) break;
        }
    }
    assert(rem == 0); // Иначе *this < other
    return this->normalize();
}

// Умножение на короткое:
UInt& UInt::operator*=(const int64_t num) {
    assert(num >= 0);
    if (num >= BASE) {
        return *this *= UInt(num);
    }
    int64_t rem = 0;
    for (auto& d : digits) {
        rem += 1LL * d * num;
        auto div = rem / BASE;
        d = rem - div * BASE;
        rem = div;
    }
    if (rem > 0) digits.push_back(rem);
    return this->normalize();
}

// Медленное произведение:
UInt UInt::slow_mult(const UInt& other) const {
    if (other.digits.size() == 1u) {
        return *this * other.digits[0];
    }
    const int64_t s1 = (int64_t)this->digits.size();
    const int64_t s2 = (int64_t)other.digits.size();
    std::vector<int64_t> temp(s1+s2);
    for (int64_t i = 0; i < s1; ++i) {
        int64_t rem = 0;
        for (int64_t j = 0; j < s2; ++j) {
            rem += temp[i+j] + 1LL * this->digits[i] * other.digits[j];
            auto div = rem / BASE;
            temp[i+j] = rem - div * BASE;
            rem = div;
        }
        if (rem > 0) temp[i+s2] += rem;
    }
    return UInt(temp);
}

// Быстрое умножение на основе быстрого преобразования Фурье:
UInt UInt::fast_mult(const UInt& other) const {
    if (other.digits.size() == 1u) {
        return *this * other.digits[0];
    }

    // Разворот битов в числе num:
    std::function<int64_t(int64_t, int64_t)> reverse = [](int64_t number, int64_t nBits) {
        int64_t res = 0;
        for (int64_t i = 0; i < nBits; ++i) {
            if (number & (1 << i)) {
                res |= 1 << (nBits-1-i);
            }
        }
        return res;
    };

    typedef std::complex<long double> complex;
    // Быстрое преобразование Фурье:
    std::function<void(std::vector<complex>&, bool)> fft = [&reverse](std::vector<complex> & a, bool invert) {
        const int64_t n = (int64_t)a.size();
        int64_t nBits = 0;
        while ((1 << nBits) < n) ++nBits;

        for (int64_t i = 0; i < n; ++i) {
            if (i < reverse(i, nBits)) {
                std::swap(a[i], a[reverse(i, nBits)]);
            }
        }

        for (int64_t len = 2; len <= n; len <<= 1) {
            auto ang = 2*PI / len * (invert ? -1 : 1);
            complex wlen (std::cos(ang), std::sin(ang));
            for (int64_t i = 0; i < n; i += len) {
                complex w(1);
                for (int64_t j = 0; j < len / 2; ++j) {
                    complex u = a[i+j];
                    complex v = a[i+j+len / 2] * w;
                    a[i+j] = u + v;
                    a[i+j+len/2] = u - v;
                    w *= wlen;
                }
            }
        }
        if (invert) {
            for (int64_t i = 0; i < n; ++i) {
                a[i] /= n;
            }
        }
    };

    // Подготавливаем вектора из комплексных коэффициентов fa и fb:
    // Так как происходит потеря точности из-за арифметики с плавающей точкой, основание системы необходимо понизить:
    assert(BASE == 1000 * 1000 * 1000);
    std::function<std::vector<complex>(const UInt&)> prepare = [](const UInt& number) {
        std::vector<complex> result;
        result.reserve(3 * number.digits.size());
        for (auto d : number.digits) {
            result.push_back(d % 1000);
            result.push_back(d / 1000 % 1000);
            result.push_back(d / 1000000);
        }
        return result;
    };

    auto fa = prepare(*this);
    auto fb = prepare(other);

    // Округляем размер векторов до ближайшей степени двойки:
    int64_t n = 1;
    while (n < (int64_t)std::max(fa.size(), fb.size())) n *= 2;
    n *= 2;
    fa.resize(n);
    fb.resize(n);

    // Вызываем прямое преобразование Фурье:
    fft (fa, false);
    fft (fb, false);
    // Перемножаем результаты:
    for (int64_t i = 0; i < n; ++i) {
        fa[i] *= fb[i];
    }
    // Вызываем обратное преобразование Фурье:
    fft (fa, true);
    // Копируем ответ с округлениями:
    std::vector<int64_t> temp(n);
    for (int64_t i = 0; i < (int64_t)fa.size(); ++i) {
        temp[i] = int64_t (fa[i].real() + 0.5);
    }
    // Не забываем про переносы в старшие разряды:
    int64_t carry = 0;
    for (int64_t i = 0; i < n || carry > 0; ++i) {
        if (i >= n) temp.push_back(0);
        temp[i] += carry;
        carry = temp[i] / 1000;
        temp[i] -= carry * 1000;
        assert(temp[i] >= 0);
    }
    // Формируем ответ:
    std::vector<int64_t> res;
    res.reserve(this->digits.size() + other.digits.size());

    for (int64_t i = 0; i < n; i += 3) {
        int64_t c = temp[i];
        int64_t b = i+1 < n ? temp[i+1] : 0;
        int64_t a = i+2 < n ? temp[i+2] : 0;
        res.push_back(c + 1000 * (b + 1000 * a));
    }
    return UInt(res);
}

// Комбинированный метод умножения:
UInt UInt::mult(const UInt& other) const {
// Выбор метода умножения:
    int64_t len1 = (int64_t)this->digits.size();
    int64_t len2 = (int64_t)other.digits.size();
    int64_t temp = 3 * std::max(len1, len2);
    int64_t pow = 1;
    while (pow < temp) pow *= 2;
    pow *= 2;
    int64_t op1 = len1 * len2;
    int64_t op2 = 3 * pow * std::log(pow) / std::log(2);
    return op1 >= 15 * op2 ? fast_mult(other) : slow_mult(other);
}

// Деление на короткое:
UInt& UInt::operator/=(const int64_t num) {
    assert(num > 0);
    if (num >= BASE) {
        return *this /= UInt(num);
    }
    int64_t rem = 0;
    for (int64_t j = (int64_t)digits.size()-1; j >= 0; --j) {
        (rem *= BASE) += digits[j];
        auto div = rem / num;
        digits[j] = div;
        rem -= div * num;
    }
    return this->normalize();
}

// Остаток от деления на короткое:
int64_t operator%(const UInt& a, const int64_t num) {
    assert(num > 0);
    int64_t rem = 0;
    for (int64_t i = (int64_t)a.digits.size()-1; i >= 0; --i) {
        ((rem *= UInt::BASE) += a.digits[i]) %= num;
    }
    return rem;
}

// Целая часть и остаток от деления:
std::pair<UInt, UInt> UInt::div_mod(const UInt& other) const {
    if (other.digits.size() == 1u) {
        return {std::move(*this / other.digits[0]), *this % other.digits[0]};
    }
    const int64_t norm = BASE / (other.digits.back() + 1);
    const UInt a = *this * norm;
    const UInt b = other * norm;
    const int64_t a_size = (int64_t)a.digits.size();
    const int64_t b_size = (int64_t)b.digits.size();
    UInt q, r;
    q.digits.resize(a_size);
    for (int64_t i = a_size - 1; i >= 0; --i) {
        r *= BASE;
        r += a.digits[i];
        int64_t s1 = (int64_t)r.digits.size() <= b_size ? 0 : r.digits[b_size];
        int64_t s2 = (int64_t)r.digits.size() <= b_size - 1 ? 0 : r.digits[b_size - 1];
        int64_t d = (1LL * BASE * s1 + s2) / b.digits.back();
        auto temp = b * d;
        while (r < temp) {
            r += b;
            --d;
        }
        r -= temp;
        q.digits[i] = d;
    }
    return {std::move(q.normalize()), std::move(r /= norm)};
}

// Сравнение: result < 0 (меньше), result == 0 (равно), result > 0 (больше)
int64_t UInt::compare(const UInt& other) const {
    if (this->digits.size() > other.digits.size()) return 1;
    if (this->digits.size() < other.digits.size()) return -1;
    for (int64_t i = (int64_t)digits.size()-1; i >= 0; --i) {
        if (this->digits[i] > other.digits[i]) return 1;
        if (this->digits[i] < other.digits[i]) return -1;
    }
    return 0;
}

// Операторы сравнения:
bool operator< (const UInt& a, const UInt& b) { return a.compare(b) < 0; }
bool operator> (const UInt& a, const UInt& b) { return a.compare(b) > 0; }
bool operator==(const UInt& a, const UInt& b) { return a.compare(b) == 0; }
bool operator<=(const UInt& a, const UInt& b) { return a.compare(b) <= 0; }
bool operator>=(const UInt& a, const UInt& b) { return a.compare(b) >= 0; }
bool operator!=(const UInt& a, const UInt& b) { return a.compare(b) != 0; }

// Ввод из потока:
std::istream& operator>>(std::istream& is, UInt& number) {
    std::string s;
    is >> s;
    number = UInt(s);
    return is;
}

// Вывод в поток:
std::ostream& operator<<(std::ostream& os, const UInt& number) {
    os << number.digits.back();
    for (int64_t i = (int64_t)number.digits.size()-2; i >= 0; --i) {
        os << std::setw(UInt::WIDTH) << std::setfill('0') << number.digits[i];
    }
    return os << std::setfill(' ');
}

// Сумма:
UInt operator+(const UInt& a, const UInt& b) {
    return UInt(a) += b;
}

// Разность:
UInt operator-(const UInt& a, const UInt& b) {
    return UInt(a) -= b;
}

// Произведение:
UInt operator*(const UInt& a, const UInt& b) {
    return a.mult(b);
}

// Деление:
UInt operator/(const UInt& a, const UInt& b) {
    return a.div_mod(b).first;
}

// Взятие остатка:
UInt operator%(const UInt& a, const UInt& b) {
    return a.div_mod(b).second;
}

// Умножение:
UInt& UInt::operator*=(const UInt& other) {
    return *this = *this * other;
}

// Деление с присваиванием:
UInt& UInt::operator/=(const UInt& other) {
    return *this = *this / other;
}

// Взятие остатка с присваиванием:
UInt& UInt::operator%=(const UInt& other) {
    return *this = *this % other;
}

UInt operator+(const UInt& a, const int64_t b) { return UInt(a) += b; }
UInt operator+(const int64_t a, const UInt& b) { return b * a; }
UInt operator-(const UInt& a, const int64_t b) { return UInt(a) -= b; }
UInt operator*(const UInt& a, const int64_t b) { return UInt(a) *= b; }
UInt operator*(const int64_t a, const UInt& b) { return b * a; }
UInt operator/(const UInt& a, const int64_t b) { return UInt(a) /= b; }
UInt operator^(const UInt& a, const int64_t n) { return pow(a, n); } // Возведение в степень

// Возведение в степень:
UInt pow(UInt a, int64_t n) {
    UInt res = 1;
    while (n > 0) {
        if (n % 2 != 0) res *= a;
        a *= a;
        n /= 2;
    }
    return res;
}

// Наибольший общий делитель:
UInt gcd(UInt a, UInt b) {
    while (b != 0) {
        auto rem = a % b;
        a = b;
        b = rem;
    }
    return a;
}

int64_t char_to_number(char symbol) {
  if (symbol >= 48 && symbol <= 57)
    return symbol - 48;
  if (symbol >= 65 && symbol <= 90)
    return symbol - 55;
  if (symbol >= 97 && symbol <= 122)
    return symbol - 61;
  if (symbol == 32)
    return 62;
  if (symbol == 46)
    return 63;
  return 64;
}

UInt super_pow(UInt p, UInt a, size_t n) {
    UInt res = 1;
    while (n > 0) {
        if (n % 2 != 0) res = (res * a) % p;
        a = (a * a) % p;
        n /= 2;
    }
    return res % p;
}

char number_to_char(int64_t number) {
  if (number <= 9)
    return char(number + 48);
  if (10 <= number && number <= 35)
    return char(number + 55);
  if (36 <= number && number <= 61)
    return char(number + 61);
  if (number == 62)
    return char(32);
  if (number == 63)
    return char(46);
  return 64;
}

int64_t gcd(int64_t a, int64_t b, int64_t& x, int64_t& y) {
    if (b == 0) {
        x = 1;
        y = 0;
        return a;
    }
    int64_t x1, y1;
    int64_t d = gcd(b, a % b, x1, y1);
    x = y1;
    y = x1 - y1 * (a / b);
    return d;
}

Polynomial<Modular> Super;

Polynomial<Modular> mega_pow(UInt n, Polynomial<Modular> P) {
    Polynomial<Modular> res(Modular(1));
    while (n > 0) {
        if (n % 2 != 0) res = (res * P);
        P = (P * P) % Super;
        res %= Super;
        n /= 2;
    }
    return res;
}





int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> mod;
    cin.ignore();
    vector<int64_t> f;
    vector<Modular> F;
    string line;
    getline(cin, line);
    istringstream ss(line);
    f = std::vector<int64_t>(std::istream_iterator<int64_t>{ss}, std::istream_iterator<int64_t>{});
    for (auto x : f) {
        F.push_back(Modular(x));
    }
    Polynomial<Modular> F_(F);
    Super = F_;
    vector<Modular> coefficients;
    int64_t k;
    cin >> k;
    string g, h;
    UInt N = 0;
    UInt p(mod);
    int i = 0;
    cin >> ws;
    while(getline(cin, g)) {
        cin >> ws;
        getline(cin, h);
        ++i;
        vector<int64_t> alpha;
        vector<int64_t> beta;
        istringstream x(g), y(h);
        alpha = vector<int64_t>(std::istream_iterator<int64_t>{x}, std::istream_iterator<int64_t>{});
        beta = vector<int64_t>(std::istream_iterator<int64_t>{y}, std::istream_iterator<int64_t>{});
        vector<Modular> U, V;
        for (auto x : alpha) {
            U.push_back(Modular(x));
        }
        for (auto x : beta) {
            V.push_back(Modular(x));
        }
        Polynomial<Modular> U_(U), V_(V);
        auto T_ = mega_pow(pow(p, f.size() - 1) - 2, U_);

        V_ = (mega_pow(k, T_) * V_) % Super;


        vector<Modular> coef;
        for (int i = 0; i != V_.Degree() + 1; ++i) {
            coef.push_back(V_[i]);
        }
        for (int i = V_.Degree() + 1; i != f.size() - 1; ++i) {
            coef.push_back(Modular(0));
        }
        for (auto x : coef) {
            coefficients.push_back(x);
        }
        //cout << coef.size() << ' ';
    }
    //UInt p(mod);
    for (int64_t i = coefficients.size() - 1; i != -1; --i) {
        N += pow(p, i) * coefficients[i].val;

    }
    while (N != 0) {
        cout << number_to_char(N % 64);
        N -= N % 64;
        N /= 64;
    }
}
